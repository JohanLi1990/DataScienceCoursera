trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit3 <- train(chd ~ age + alcohol + obesity +tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass(trainSA$chd,predict(modfit3))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modfit3))
missClass(trainSA$chd,predict(modfit3, testSA))
missClass(testSA$chd,predict(modfit3, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
modfit4 <- train(y ~., data = vowel.train, method = "rf")
varImp(modfit4)
set.seed(33833)
modfit4 <- train(y ~., data = vowel.train, method = "rf")
varImp(modfit4)
modfit4 <- randomForest(y ~., data = vowel.train)
varImp(modfit4)
varImp(modfit4, order = "decreasing")
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
rm(list  = ls())
library(caret);library(randomForest);library(rpart); library(rattle); library(plyr)
Training <-  read.csv("pml-training", header=TRUE, na.strings = c("NA","",'#DIV/0!'))
Testing <- read.csv("pml-testing",header=TRUE, na.strings = c("NA","",'#DIV/0!'))
Training<- Training[ , colSums(is.na(Training)) == 0]
Testing<- Testing[ , colSums(is.na(Testing)) == 0]
Training_preFinal <- Training[,-(1:7)]
Testing_preFinal<- Testing[,-(1:7)]
Testing_preFinal<-Testing_preFinal[, -53]
set.seed(123)
TrainingID <- createDataPartition(Training_preFinal$classe, p=0.75, list = F)
FinalTraining <- Training_preFinal[TrainingID,]
FinalValidation <- Training_preFinal[-TrainingID, ]
tr_ctrl <- trainControl(FinalTraining, method = "cv", number = 3)
model_gbm <- train(classe ~., data = FinalTraining, preProcess = c("center", "scale")
, trControl = tr_ctrl, method = "gbm", verbose = F)
gbm_pred <- predict(model_gbm, newdata = FinalTraining)
gbm_evaluation <- confusionMatrix(gbm_pred, FinalValidation$classe)
gbm_pred <- predict(model_gbm, newdata = FinalValidation)
gbm_evaluation <- confusionMatrix(gbm_pred, FinalValidation$classe)
gbm_evaluation
gbm_outta_sample_error <- 1 - gbm_evaluation$overall['Accuracy']
gbm_outta_sample_error
print(gbm_outta_sample_error)
rename(gbm_outta_sample_error, "out of sample error")
gbm_outta_sample_error <- 1 - gbm_evaluation$overall[1]
gbm_outta_sample_error
names(gbm_outta_sample_error)
names(gbm_outta_sample_error) <- "out of sample error"
gbm_outta_sample_error
names(gbm_outta_sample_error) <- "out of sample error for gbm"
gbm_outta_sample_error
set.seed(245)
tr_ctrl <- trainControl(FinalTraining, method = "cv", number = 3)
model_gbm <- train(classe ~., data = FinalTraining, preProcess = c("center", "scale")
, trControl = tr_ctrl, method = "gbm", verbose = F)
gbm_pred <- predict(model_gbm, newdata = FinalValidation)
gbm_evaluation <- confusionMatrix(gbm_pred, FinalValidation$classe)
gbm_outta_sample_error <- 1 - gbm_evaluation$overall[1]
names(gbm_outta_sample_error) <- "out of sample error for gbm"
gbm_outta_sample_error
set.seed(246)
model_rf <- train(classe ~., data = FinalTraining, method = "rf",
trControl = tr_ctrl, preProcess = c("center", "scale"))
rf_pred <- predict(model_rf, newdata = FinalValidation)
rf_evaluation <- confusionMatrix(rf_pred, FinalValidation$classe)
rf_outta_sample_error <- 1 - rf_evaluation$overall[1]
names(rf_outta_sample_error) <- "out of sample error for rf"
rf_outta_sample_error
rf_evaluation
model_rf$finalModel
model_rf
set.seed(246)
model_rf <- train(classe ~., data = FinalTraining, method = "rf",
trControl = tr_ctrl)
rf_pred <- predict(model_rf, newdata = FinalValidation)
rf_evaluation <- confusionMatrix(rf_pred, FinalValidation$classe)
rf_outta_sample_error <- 1 - rf_evaluation$overall[1]
names(rf_outta_sample_error) <- "out of sample error for rf"
rf_outta_sample_error
rf_test_pred <- pred(model_rf, newdata = Testing_preFinal)
rf_test_pred <- predict(model_rf, newdata = Testing_preFinal)
print(rf_test_pred)
rm(list = ls())
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(kernlab); data(spam); set.seed(333)
?spam
?sample
dim(spam)
sample(dim(spam)[1], size = 10)
sample(dim(spam)[1], size = 10)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
spamLabel <- (smallSpam$type=="spam")*1 + 1
?spam
plot(smallSpam$capitalAve,col=spamLabel)
library(kernlab); data(spam); set.seed(333)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
spamLabel <- (smallSpam$type=="spam")*1 + 1
plot(smallSpam$capitalAve,col=spamLabel)
plot(smallSpam$capitalAve,col=spamLabel)
View(smallSpam)
plot(smallSpam$capitalAve,col=smallSpam$type)
smallSpam$capitalAve > 2.4
load("/home/johan/Documents/courses/09_DevelopingDataProducts/plotly/courseraData.rda")
View(myData)
View(myData)
View(smallSpam)
View(spam)
install.packages("shiny")
shiny::runApp('Documents/DataScienceCoursera/Developing_Data_Product/MyApp')
runApp('Documents/DataScience_Materials/Developing Data Products_Github/Developing_Data_Products/Shiny_Part_2/app4')
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
install.packages("miniUI")
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
library(shiny)
library(miniUI)
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
```
## Gadgets with Arguments: Code Part 2
```r
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
multiplyNumbers()
multiplyNumbers(10, 10)
multiplyNumbers(1:10, 1:10)
library(plotly)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
?mutate
plot_ly(x = ~precip, type = "histogram")
plot_ly(x = precip, type = "histogram")
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
?state
shiny::runApp('Documents/DataScience_Materials/Developing Data Products_Github/Developing_Data_Products/Shiny_Part_1/app1')
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=57.5898801,
popup="my home")
my_map
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
library(leaflet)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
knitr::opts_chunk$set(echo = FALSE)
library(leaflet)
myMap <- TAPLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = TAPIcon, popup = TAPSites)
TAPIcon <- makeIcon(
iconUrl = "https://cdn4.iconfinder.com/data/icons/flag-pins/512/Singapore_Flag.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
TAPLatLong <- data.frame(
lat = c(1.332639, 1.332349, 1.331738),
lng = c(103.847046, 103.848473, 103.848720)
)
TAPSites <- c(
"<a href='landtransportguru.net/toa-payoh-station/'>The Toa Payoh MRT station</a>",
"<a href='http://www.hdb.gov.sg/cs/infoweb/homepage/'>Housing and Development Board</a>",
"<a href='https://www.britishcouncil.sg/'>British Council</a>"
)
myMap <- TAPLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = TAPIcon, popup = TAPSites)
myMap
TAPLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = TAPIcon, popup = TAPSites)
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803, lng=-76.5898801,
popup="Jeff Leek's Office")
my_map
TAPIcon <- makeIcon(
iconUrl = "https://cdn4.iconfinder.com/data/icons/flag-pins/512/Singapore_Flag.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
TAPLatLong <- data.frame(
lat = c(1.332639, 1.332349, 1.331738),
lng = c(103.847046, 103.848473, 103.848720)
)
TAPSites <- c(
"<a href='landtransportguru.net/toa-payoh-station/'>The Toa Payoh MRT station</a>",
"<a href='http://www.hdb.gov.sg/cs/infoweb/homepage/'>Housing and Development Board</a>",
"<a href='https://www.britishcouncil.sg/'>British Council</a>"
)
TAPLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = TAPIcon, popup = TAPSites)
?numeric
numeric(4)
?seq_len
seq_len(numeric(3))
n<-c(1:10)
seq_len(n)
ncol(n)
ncl(spam)
ncol(spam)
seq_len(58)
a <- c(12,30, 4, 5)
order(a)
spam(, order(a))
spam[, order(a)]
?cbind
cbind(1,state_pop)
?class
x <- 10
class(x)
oldClass(x)
?inherits
isGeneric("colSums")
isGeneric("mean")
isGeneric("plot")
hel[]
?mean
?colSums
?predict
?lm
?show
setwd("~/Documents/DataScienceCoursera/Developing_Data_Product")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
?rep
time <- rep(time(EuStockMarkets), 4)
head(time)
?rep
fred <- list(happy = 1:10, name = "squash")
rep(fred, 5)
head(EuStockMarkets)
head(time(EuStockMarkets))
?time
time(1:10)
?EuStockMarkets
EuStockMarkets
?stats
library(help = 'stats')
install.packages("rdatamarket")
?rdatamarket
??rdatamarket
library(rdatamarket)
?`rdatamarket-package`
oil <- dminfo("17tm")
print(oil)
series <- dmseries(oil, Country="Yemen")
series
library(plotly)
setwd("~/Documents/DataScienceCoursera/Developing_Data_Product")
PM_2.5_one_day <- read.csv("Sales_Transactions_Dataset_Weekly.csv")
rm(list = ls())
PM_2.5_one_day <- read.csv("Sales_Transactions_Dataset_Weekly.csv")
View(PM_2.5_one_day)
SaleData <- read.csv("Sales_Transactions_Dataset_Weekly.csv")
View(PM_2.5_one_day)
rm(PM_2.5_one_day)
rm(list = ls())
Alibaba <- read.csv("BABA.csv")
Facebook <- read.csv("FaceBook.csv")
Apple <- read.csv("Apple.csv")
View(Alibaba)
View(Apple)
rm(Alibaba)
Alibaba <- read.csv("BABA.csv")
View(Alibaba)
View(Apple)
View(Alibaba)
View(Apple)
rm(Alibaba)
Alibaba <- read.csv("Baba.csv")
View(Alibaba)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price)
View(EuStockMarkets)
View(stocks)
library(dplyr)
library(tidyr)
View(Alibaba)
Alibaba_closing <- select(Alibaba, date, close)
Facebook_closing <- select(Facebook, date, close)
Apple_closing <- select(Apple, date, close)
Ali_face_Apple <- left_join(Alibaba_closing, Facebook_closing, by = "date")
Ali_face_Apple <- left_join(Ali_face_Apple, Apple, by = "date")
View(Ali_face_Apple)
rm(Ali_face_Apple)
Ali_face_Apple <- left_join(Alibaba_closing, Facebook_closing, by = "date")
Ali_face_Apple <- left_join(Ali_face_Apple, Apple_closing, by = "date")
View(Ali_face_Apple)
rename(Facebook_closing, close = close1)
rename(Facebook_closing, close = "close")
rename(Facebook_closing, close = "f_close")
rename(Facebook_closing, fclose = close)
View(Facebook_closing)
Ali_face_Apple <- rename(Ali_face_Apple, Alibaba = Ali_face_Apple$close.x)
Ali_face_Apple <- rename(Ali_face_Apple, Alibaba = close.x)
View(Ali_face_Apple)
Ali_face_Apple <- rename(Ali_face_Apple, Alibaba = close.x, Facebook = close.y, Apple = close)
Ali_face_Apple <- rename(Ali_face_Apple,Facebook = close.y, Apple = close)
View(Ali_face_Apple)
is.data.frame(Ali_face_Apple)
View(EuStockMarkets)
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price)
View(stocks)
View(EuStockMarkets)
stocks <- as.data.frame(Ali_face_Apple) %>% gather(index, price)
View(stocks)
stocks <- as.data.frame(Ali_face_Apple) %>% gather(date, Alibaba, Facebook, Apple)
View(stocks)
stocks <- as.data.frame(Ali_face_Apple) %>% gather(Alibaba, Facebook, Apple)
View(stocks)
Alitry <- select(Ali_face_Apple, Alibaba, Facebook, Apple)
stocks <- gather(Alitry, index, price)
View(stocks)
Ali_face_Apple$date <- time(Ali_face_Apple$date)
Ali_face_Apple <- arrange(Ali_face_Apple, date)
View(Ali_face_Apple)
Ali_face_Apple[, 1:3]
Ali_face_Apple[, 2:4]
StockPrice <- as.data.frame(Ali_face_Apple[, 2:4]) %>%
gather(index, price) %>%
mutate(time = rep(time(Ali_face_Apple), 3))
# Need to plot
StockPrice <- as.data.frame(Ali_face_Apple[, 2:4]) %>%
gather(index, price) %>%
mutate(time = rep(Ali_face_Apple$date, 3))
View(StockPrice)
plot_ly(StockPrice, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
Ali_face_Apple$date <- Apple$date
Ali_face_Apple <- arrange(Ali_face_Apple, date)
# Need to plot
StockPrice <- as.data.frame(Ali_face_Apple[, 2:4]) %>%
gather(index, price) %>%
mutate(time = rep(Ali_face_Apple$date, 3))
plot_ly(StockPrice, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
plot_ly(StockPrice, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
plot_ly(StockPrice, x = axis.POSIXct(~time), y = ~price, color = ~index, type = "scatter", mode = "lines", )
plot_ly(StockPrice, x = as.POSIXct(StockPrice$time), y = ~price, color = ~index, type = "scatter", mode = "lines", )
plot_ly(StockPrice, x = as.Date(StockPrice$time), y = ~price, color = ~index, type = "scatter", mode = "lines", )
as.Date(StockPrice$time)
rm(list = ls())
Ali_face_Apple$date <- time(Ali_face_Apple$date)
Alibaba <- read.csv("Baba.csv")
Facebook <- read.csv("FaceBook.csv")
Apple <- read.csv("Apple.csv")
Alibaba_closing <- select(Alibaba, date, close)
Facebook_closing <- select(Facebook, date, close)
Apple_closing <- select(Apple, date, close)
# Need to join the three dataset together.
Ali_face_Apple <- left_join(Alibaba_closing, Facebook_closing, by = "date")
Ali_face_Apple <- left_join(Ali_face_Apple, Apple_closing, by = "date")
Ali_face_Apple <- rename(Ali_face_Apple, Alibaba = close.x)
Ali_face_Apple <- rename(Ali_face_Apple,Facebook = close.y, Apple = close)
Ali_face_Apple$date <- time(Ali_face_Apple$date)
Ali_face_Apple <- arrange(Ali_face_Apple, date)
# Need to plot
StockPrice <- as.data.frame(Ali_face_Apple[, 2:4]) %>%
gather(index, price) %>%
mutate(time = rep(Ali_face_Apple$date, 3))
plot_ly(StockPrice, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines", )
plot_ly(StockPrice, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
Ali_face_Apple$date <- as.time(Ali_face_Apple$date)
time(Ali_face_Apple)
time(EuStockMarkets)
as.time
rm(list = ls())
Alibaba <- read.csv("Baba.csv")
Facebook <- read.csv("FaceBook.csv")
Apple <- read.csv("Apple.csv")
Alibaba_closing <- select(Alibaba, date, close)
Facebook_closing <- select(Facebook, date, close)
Apple_closing <- select(Apple, date, close)
# Need to join the three dataset together.
Ali_face_Apple <- left_join(Alibaba_closing, Facebook_closing, by = "date")
Ali_face_Apple <- left_join(Ali_face_Apple, Apple_closing, by = "date")
Ali_face_Apple <- rename(Ali_face_Apple, Alibaba = close.x)
Ali_face_Apple <- rename(Ali_face_Apple,Facebook = close.y, Apple = close)
Ali_face_Apple$date <- time(Ali_face_Apple$date)
Ali_face_Apple <- arrange(Ali_face_Apple, date)
# Need to plot
StockPrice <- as.data.frame(Ali_face_Apple[, 2:4]) %>%
gather(index, price) %>%
mutate(time = rep(Ali_face_Apple$date, 3))
plot_ly(StockPrice, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
Alibaba <- read.csv("Baba.csv")
Facebook <- read.csv("FaceBook.csv")
Apple <- read.csv("Apple.csv")
Alibaba_closing <- select(Alibaba, date, close)
Facebook_closing <- select(Facebook, date, close)
Apple_closing <- select(Apple, date, close)
# Need to join the three dataset together.
Ali_face_Apple <- left_join(Alibaba_closing, Facebook_closing, by = "date")
Ali_face_Apple <- left_join(Ali_face_Apple, Apple_closing, by = "date")
Ali_face_Apple <- rename(Ali_face_Apple, Alibaba = close.x)
Ali_face_Apple <- rename(Ali_face_Apple,Facebook = close.y, Apple = close)
Ali_face_Apple$date <- as.Date(Ali_face_Apple$date)
Ali_face_Apple <- arrange(Ali_face_Apple, date)
# Need to plot
StockPrice <- as.data.frame(Ali_face_Apple[, 2:4]) %>%
gather(index, price) %>%
mutate(time = rep(Ali_face_Apple$date, 3))
plot_ly(StockPrice, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
