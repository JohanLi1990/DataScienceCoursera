x<-Nan
x <- NaN
x
x <-1
x
x <- c(1,2,NA, 10, 4)
x
is.na((x))
is.na(x)
## vector of true indicate where missing value is
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
names(x)
x <- list(a =1 , b = 2, c= 3)
x
m <-matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a", "n"), c("e", "f"))
m
y <- data.frame(a = 1, b = "a")
dput(y)
con <- url("http://www.hoopchina.com", "r")
x <- readLines(con)
head(x)
p(x)
body(x)
c <- matrix(1:6, 2, 3)
c
x[1,2]
c[1,2]
x <- list(aardvark = 1:5)
x
x$aardvark
x$a
y <- list(aardvark =1:3, bread = 2:4)
y$b
y$aardvark
x <- c(1, 2, NA, 3, NA, 5)
bad <- is.na(x)
bad
x[!bad]
help("complete.cases")
x <- c(1, 2, NA, 4, NA, 5)
x <- c("a", "b", NA, "d", NA, "f")
y <- c(1, 2, NA, 4, NA, 5)
y <- c(1, 2, 3, 4, NA, 5)
good <- complete.cases(x, y)
good
x <- c("a", "b", "c", "d", NA, "f")
good <- complete.cases(x, y)
x <- c("a", "b", "c", "d", NA, "f")
good <- complete.cases(x, y)
good
factor <- gl(3, 10)
length(factor)
factor(3)
library(swirl)
rm(list = ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
load("~/Documents/DataScienceCoursera/.RData")
dev.vec
?dev
dev
png()
?lines
?plot
Hh_pow <- read.table("household_power_consumption.txt", header = TRUE)
Hh_pow <- read.table("~/Explore_DA/household_power_consumption.txt", header = TRUE)
Hh_pow <- read.table("~/DataScienceCoursera/Explore_DA/household_power_consumption.txt", header = TRUE)
Hh_pow <- read.table("~/Documents/DataScienceCoursera/Explore_DA/household_power_consumption.txt", header = TRUE)
View(Hh_pow)
Hh_pow <- read.table("~/Documents/DataScienceCoursera/Explore_DA/household_power_consumption.txt", header = TRUE, sep = ";")
graphics.off()
sample(1:100, size = 40, replace = FALSE)
library(plyr)
library(dplyr)
heat.colors()
help("heat.colors")
heat.colors(10)
image(heat.colors(10))
c1 <- c(10, 10)
c1
c1 <- c(c1, c(2, 4))
c1
image(c1)
c1 <- c(c1, c1)
c1
m1 <- matrix(c1, nrow = 2, ncol = 4)
m1
image(m1)
f1 <- volcano
image(f1)
Pal <- colorRampPalette(c("red", "blue"))
Pal(1)
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRamp(cols)
image(volcano, col = pal(20))
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
image(volcano, col = pal(10))
help(dnorm)
library(ggplot2)
xvals <- seq(-10, 10, by = .01)
dat <- data.frame(
y = c(
dnorm(xvals, mean = 0, sd = 1),
dnorm(xvals, mean = 0, sd = 2),
dnorm(xvals, mean = 0, sd = 3),
dnorm(xvals, mean = 0, sd = 4)
),
x = rep(xvals, 4),
factor = factor(rep(1 : 4, rep(length(xvals), 4)))
)
ggplot(dat, aes(x = x, y = y, color = factor)) + geom_line(size = 2)
library(ggplot2)
nosim <- 10000;
dat <- data.frame(
x = c(apply(matrix(rnorm(nosim * 10), nosim), 1, var),
apply(matrix(rnorm(nosim * 20), nosim), 1, var),
apply(matrix(rnorm(nosim * 30), nosim), 1, var)),
n = factor(rep(c("10", "20", "30"), c(nosim, nosim, nosim)))
)
ggplot(dat, aes(x = x, fill = n)) + geom_density(size = 2, alpha = .2) + geom_vline(xintercept = 1, size = 2)
var
help(a"apply")
help("apply")
a1 <- matrix(rnorm(10*10), 10)
a1
help("matrix")
help("ggplot")
help("var")
var(a1)
tt1 <- apply(a1, 1, var)
tt1
help("data.frame")
size1 <- factor(rep(c(10, 20, 30)))
size1
help(rep)
rep(c(10, 20, 30), rep(10, 3))
rep(10, 3)
var(1:10)
install.packages("UsingR")
library(UsingR)
dataset(father.son)
data(father.son)
x <- father.son$sheight
n <- length(x)
plot(x)
hist(x)
qnorm(0.95, 1100, 75)
qnorm(0.95, 1100, 7.5)
pbinom(3, 5, 0.5)
?binom
?pbinom
pbinom(3, 5, 0.5, lower.tail = FALSE)
ppois(10, 15)
?ppois
n1 <- n2<-9
df_new <- 16
sp <- sqrt((n1-1)*1.5^2 + (n2-1)*1.8^2) / sqrt(df_new)
pt(q = -abs(-4.5/sp), df_new)
2* pt(q = -abs(-4.5/sp), df_new)
qnorm(1-5%)
qnorm(1-0.05)
pnorm(qnorm(0.95)*0.04/10, mean = -0.01, sd = 0.04/10, lower.tail = FALSE)
pnorm(qnorm(0.95)*0.04/10, mean = 0, sd = 0.04/10, lower.tail = FALSE)
pnorm(qnorm(0.95)*0.04/10, mean = -0.01, sd = 0.04/10)
pnorm(0 - qnorm(0.05)*0.04/10, mean = -0.01, sd = 0.04/10)
pnorm(30+ qnorm(0.95)*4/4, mean = 32, sd = 4/4)
pnorm(0 + qnorm(0.95)*4/10, mean = -0.01, sd = 4/10
)
pnorm(0 + qnorm(0.95)*0.04/10, mean = -0.01, sd = 0.04/10)
pnorm(0 + qnorm(0.95)*0.04/10, mean = 0.01, sd = 0.04/10)
pnorm(0 + qnorm(0.95)*0.04/10, mean = 0.01, sd = 0.04/10, lower.tail = FALSE)
qnorm(0.95) + qnorm(0.90)
(qnorm(0.95) + qnorm(0.90))^2
(qnorm(0.95) + qnorm(0.90))^2 * 16
1100 + qt(0.975, 8) * 30/sqrt(8)
1100 - qt(0.975, 8) * 30/sqrt(8)
1100 + qt(0.975, 8) * 30/sqrt(9)
1100 - qt(0.975, 8) * 30/sqrt(9)
sqrt((8*1.5^2+8*1.8^2)/16)
1.6568*sqrt(2/9)
pt(-abs(-4/0.781), df = 16)
a1 <- c(140, 138, 150, 148, 135)
a2 <- c(132, 135, 151, 146, 130)
t.test(a1, a2, paired = TRUE)
ppois(10, 17.81, lower.tail = TRUE)
pbinom(3. 4, 0.75, lower.tail = FALSE)
pbinom(3, 4, 0.75, lower.tail = FALSE)
}
# Hello World!!!!!!
library(manipulate)
library(UsingR)
library(manipulate)
library(ggplot2)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
help `as<-`()
help(as)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
data(galton)
library(UsingR); data(galton); library(reshape)
library(ggplot2)
library(UsingR); data(galton); library(reshape); long <- melt(galton)
install.packages("reshape")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(manipulate)
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
lm1 <- lm(galton$child ~ galton$parent)
g <- g + geom_abline(intercept = coef(lm1)[1], slope = coef(lm1)[2], size = 3, colour = grey(.5))
g
library(ggplot2)
library(swirl)
rm(list = ls())
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
play()
?formula
nxt()
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col = 'red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cor(fit$residuals, galton$parent)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
play()
?est
View(est)
nxt()
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
lm(gch_nor ~ gpa_nor)
lnor <- lm(gch_nor ~ gpa_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
for(i in c(0.3, 1.077, 0.0025, 0.1471))
{
ans <- sum(w*(x-i)^2)
print(ans)
}
rm(list = ls)
ls
ls()
a= ls()
rm(list = a)
x<-c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
x - 1
ls
for(i in c(0.3, 1.077, 0.0025, 0.1471))
{
ans <- sum(w*(x-i)^2)
print(ans)
}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fits <- lm(y ~ x)
summary(fits)
fits$coefficients
data("mtcars")
fits <- lm(mpg ~ wt, mtcars)
summary(fits)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mx <- mean(x)
ms <- sd(x)
x[1]
(x[1] - mx[1])/ms[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fits <- lm(y ~ x)
fits$coefficients
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
for(i in c(0.3, 1.077, 0.0025, 0.1471))
{
ans <- sum(w*(x-i)^2)
print(ans)
}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
for(i in c(0.3, 1.077, 0.0025, 0.1471))
{
ans <- sum(w*(x-i)^2)
print(ans)
}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fits <- lm(y ~ x)
summary(fits)
data("mtcars")
fits <- lm(mpg ~ wt, mtcars)
summary(fits)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fits <- lm(y ~ x-1)
summary(fits)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
fit <- lm(y ~ x);
library(UsingR); data(diamond)
library(ggplot2)
data("diamond")
rm(list = ls())
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x);
newx = data.frame(x = seq(min(x), max(x), length = 100))
?predict
rm(list = ls())
library(ggplot2)
library(UsingR)
library(manipulate)
ls
ls()
ls
install.packages(GGally)
install.packages("GGally")
install.packages("GGally")
library(ggplot2)
install.packages("GGally")
install.packages("GGally")
library(ggplot2)
install.packages("GGally")
install.packages(c("acepack", "assertthat", "BH", "car", "caret", "chron", "colorspace", "crayon", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "foreach", "formatR", "ggplot2", "gridExtra", "highr", "HistData", "Hmisc", "htmltools", "httr", "iterators", "jsonlite", "kernlab", "knitr", "latticeExtra", "lazyeval", "lme4", "lubridate", "markdown", "memoise", "mime", "munsell", "packrat", "pbkrtest", "plyr", "proto", "quantmod", "quantreg", "R6", "RcppEigen", "RCurl", "reshape2", "rJava", "rmarkdown", "RMySQL", "rsconnect", "RSQLite", "rstudioapi", "SparseM", "stringi", "stringr", "swirl", "testthat", "tidyr", "TTR", "XML", "yaml", "zoo"))
install.packages("GGally")
require(datasets)
datasets(InsectSprays)
data("InsectSprays")
summary(InsectSprays)
?head
InsectSprays$spray
InsectSprays[InsectSprays$spray]
InsectSprays[InsectSpray$spray == "B"]
InsectsSprays[InsectSpray$spray == "B"]
InsectsSpray[InsectSpray$spray == "B"]
InsectSprays[InsectSprays$spray == "B"]
InsectSprays
InsectSprays[InsectSprays$spray == "A", ]
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
p <- 1
n <- 100; x2 <- runif(n); x1 <- p * runif(n) - (1 - p) * x2
beta0 <- 0; beta1 <- 1; tau <- 4 ; sigma <- .01
y <- beta0 + x1 * beta1 + tau * x2 + rnorm(n, sd = sigma)
library(rgl)
plot3d(x1, x2, y)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
plot(fit)
?par
?par
x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
?hatvalues
?apply
?sapply
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
apply(betas, 1, sd)
head(betas)
View(betas)
View(betas)
sd(betas[1,])
betas[1,]
nrow(betas)
library(car)
?anova
setwd("~/Documents/DataScienceCoursera/RegressionModel")
data("mtcars")
fit_cars <- lm(mpg ~ cyl + wt, mtcars)
rm(list=ls())
data("mtcars")
fit_cars <- lm(mpg ~ cyl + wt, mtcars)
summary(fit_cars)
data("mtcars")
fit_cars <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit_cars)
fit_noWT <- lm(mpg ~ factor(cyl), mtcars)
fit_noWT <- lm(mpg ~ factor(cyl), mtcars)
summary(fit_noWT)$coef
fit1<- fit_cars
fit2<- lm(mpg ~ factor(cyl) + wt + factor(cyl)*wt, mtcars)
summary(fit1)$coef
summary(fit2)$coef
anova(fit1, fit2)
lrtest(fit1, fit2)
library(car)
fit4<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hat
?hatvalues
fit5<-lm(y~x)
hatvalues(fit5)
mean(x)
dfbeta(fit5)
dfbetas(fit5)
?dfbetas
