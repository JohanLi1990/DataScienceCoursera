rm(list = ls())
library(ggplot2)
library(UsingR)
library(manipulate)
ls
ls()
ls
install.packages(GGally)
install.packages("GGally")
install.packages("GGally")
library(ggplot2)
install.packages("GGally")
install.packages("GGally")
library(ggplot2)
install.packages("GGally")
install.packages(c("acepack", "assertthat", "BH", "car", "caret", "chron", "colorspace", "crayon", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "foreach", "formatR", "ggplot2", "gridExtra", "highr", "HistData", "Hmisc", "htmltools", "httr", "iterators", "jsonlite", "kernlab", "knitr", "latticeExtra", "lazyeval", "lme4", "lubridate", "markdown", "memoise", "mime", "munsell", "packrat", "pbkrtest", "plyr", "proto", "quantmod", "quantreg", "R6", "RcppEigen", "RCurl", "reshape2", "rJava", "rmarkdown", "RMySQL", "rsconnect", "RSQLite", "rstudioapi", "SparseM", "stringi", "stringr", "swirl", "testthat", "tidyr", "TTR", "XML", "yaml", "zoo"))
install.packages("GGally")
require(datasets)
datasets(InsectSprays)
data("InsectSprays")
summary(InsectSprays)
?head
InsectSprays$spray
InsectSprays[InsectSprays$spray]
InsectSprays[InsectSpray$spray == "B"]
InsectsSprays[InsectSpray$spray == "B"]
InsectsSpray[InsectSpray$spray == "B"]
InsectSprays[InsectSprays$spray == "B"]
InsectSprays
InsectSprays[InsectSprays$spray == "A", ]
install.packages("rgl")
install.packages("rgl")
install.packages("rgl")
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
p <- 1
n <- 100; x2 <- runif(n); x1 <- p * runif(n) - (1 - p) * x2
beta0 <- 0; beta1 <- 1; tau <- 4 ; sigma <- .01
y <- beta0 + x1 * beta1 + tau * x2 + rnorm(n, sd = sigma)
library(rgl)
plot3d(x1, x2, y)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
plot(fit)
?par
?par
x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
?hatvalues
swirl()
swirl
?swirl
swirl()
swirl
library(swirl)
swirl()
swirl()
swirl()
swirl()
library(swirl)
ls()
rm(list = ls())
swirl()
install.packages(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_course_directory()
install_course()
install_course("Statstic Inference")
install_course("Statstic Inference")
install_course("Statistical Inference")
swirl()
swirl()
swirl()
swirl()
library("swirl")
swirl()
install_course("Regression Models")
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
bye()
library("swirl")
ls()
rm(list = ls())
swirl()
sA
sA[, 2]
InsectSprays[,2]
summary(InsectSprays[,2])
sap
sapply(InsectSprays[, 2])
info()
sapply(InsectSprays[, 2], FUN = class())
sapply(InsectSprays[, 2], FUN = class(InsectSprays))
sapply(InsectSprays, class)
lm(count ~ spray, InsectSprays)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count ~ spray - 1, InsectSprays)
nfit$coefficients
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2<- lm(count ~ spray, spray2)
fit2<- lm(InsectSprays$count ~ spray2)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
rm(list = ls())
swirl()
dim(hunger)
948
names(hunger[, 13])
names(hunger)
fit <- lm(Numeric~Year, hunger)
coef(fit)
summary(fit)$coef
hunger$Numeric
lmf<-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmF<-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmM<-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
swirl()
library(swirl)
rm(list = ls())
swirl()
swirl()
fit<-lm(y~x, out2)
plot(fit, which = 1)
fitno<-lm(y~x, out2[-1,])
plot(fitno, which = 1)
coef(fit) -coef(fitno)
head(dfbeta(fit))
resno<-out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
info()
play()
resno
out2[1, "y"]
out2[1, 0]
out2[1,]
predict(fitno, out2[1,])
nxt
nxt()
head(hatvalues(fit))
ssm(fit$residuals)
fit$residuals
sigma<-sqrt(deviance(fit)/df.residual(fit))
play()
df.residual(fit)
?df.residual
?deviance
nxt()
rstd<-resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which = 3)
plot(fit, which = 2)
sigma1<- sqrt(deviance(fitno)/df.residual((fitno)))
resid(fit1)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
library("swirl")
swirl()
head(swiss)
mdl <- lm(Fertility ~., swiss)
vif(mdl)
mdl2<-lm(Fertility ~ .)
mdl2<-lm(Fertility ~., swiss)
mdl2<-lm(Fertility ~ .-Examination, swiss)
vif(mdl2)
swirl
swirl()
x1c<-simbias()
bye()
rm(ls = list())
rm(list = ls())
swirl()
simbias();apply(z1c, 1, mean)
simbias();apply(x1c, 1, mean)
apply(x1c, 1, mean)
x1c<-simbias();apply(x1c, 1, mean)
fi1<-lm(Fertility ~ Agriculture, swiss)
fit1<-lm(Fertility ~ Agriculture, swiss)
fit3<-lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-(deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
swirl()
view(ravenData)
View(ravenData)
mdl<-glm(ravenWinNum ~ ravenScore, family = "binomial", ravenData)
lodds<-predict(mdl, data.frame(ravenScore = c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
library("swirl")
swirl()
install_course("Exploratory_Data_Analysis")
install_course("Mathematical_Biostatistics_Boot_Camp")
install_course("Mathematical_Biostatistics_Boot_Camp")
install_course("Mathematical_Biostatistics_Boot_Camp")
install_course("R_Programming_Alt")
library(swirl)
install_course("R_Programming_Al")
install_course("R_Programming_Alt")
install_course("Data_Analysis")
install_course("Data Analysis")
install_course("R_Programming")
library(caret)
?`caret-internal`
rm(list = ls())
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(training)
?createDataPartition
?set.seed
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
folds
View(folds)
View(folds)
4141/4601
4601 - 4141
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit <- train(type ~.,data=training, method="glm")
fit <- lm()
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit <- train(type ~.,data=training, method="glm")
install.packages('e1071', dependencies=TRUE)
install.packages('e1071', dependencies=TRUE)
modelFit <- train(type ~.,data=training, method="glm")
warnings()
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
install.packages("ISLR")
library(ISLR); library(ggplot2); library(caret); library(gridExtra);
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
rm(list = ls())
library(caret)
library(mlbench)
data(Sonar)
set.seed(107)
inTrain <- createDataPartition(y = Sonar$Class, p = 0.75, list = FALSE)
str(inTrain)
training <- Sonar[inTrain, ]
testing <- Sonar[-inTrain, ]
nrow(training)
nrow(testing)
plsFit <- train( Clas ~., data = training, method = "pls", preProc = c("center", "scale"))
plsFit <- train(Class ~., data = training, method = "pls", preProc = c("center", "scale"))
?train
summary(plsFit)
plsFit$method
plsFit
sensitivity(plsFit)
library(kernlab)
data(spam)
?spam
install.packages("rattle")
install.packages("rattle")
install.packages("RGtk2Extras")
install.packages("RGtk2")
install.packages(c("brglm", "curl", "DBI", "dplyr", "evaluate", "GGally", "jsonlite", "quantmod", "R6", "rJava", "rmarkdown", "RSQLite", "sqldf", "tibble", "XML"))
install.packages(c("brglm", "curl", "DBI", "dplyr", "evaluate", "GGally", "jsonlite", "quantmod", "R6", "rJava", "rmarkdown", "RSQLite", "sqldf", "tibble", "XML"))
install.packages(c("brglm", "curl", "DBI", "dplyr", "evaluate", "GGally", "jsonlite", "quantmod", "R6", "rJava", "rmarkdown", "RSQLite", "sqldf", "tibble", "XML"))
install.packages(c("brglm", "curl", "DBI", "dplyr", "evaluate", "GGally", "jsonlite", "quantmod", "R6", "rJava", "rmarkdown", "RSQLite", "sqldf", "tibble", "XML"))
library(rattle)
install.packages("rattle")
install.packages("rattle")
install.packages("RGtk2Extras")
install.packages("https://cran.r-project.org/src/contrib/Archive/RGtk2/RGtk2_2.20.31.tar.gz", repos=NULL)
install.packages("rattle")
library(rattle)
modFit<- train(Class~., method="rpart",data=training,verbose=FALSE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(ggplot2)
library(lattice)
library(caret)
library(rpart)
#Step 1: create data partition
training <- segmentationOriginal[segmentationOriginal$Case == "Train", ]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test", ]
#Step 2:Cart Model, seed = 125, rpart
set.seed(125)
modFit<- train(Class~., method="rpart",data=training,verbose=FALSE)
# Stpe 3 draw maps
library(rattle)
set.seed(125)
modFit<- train(Class~., method="rpart",data=training)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
data(olive)
View(olive)
olive = olive[, -1]
modfit2<-train(Area ~., data = olive, method = "rpart")
?t
predict(modfit2, newdata = as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit3 <- train(chd ~ age + alcohol + obesity +tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass(trainSA$chd,predict(modfit3))
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modfit3))
missClass(trainSA$chd,predict(modfit3, testSA))
missClass(testSA$chd,predict(modfit3, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
modfit4 <- train(y ~., data = vowel.train, method = "rf")
varImp(modfit4)
set.seed(33833)
modfit4 <- train(y ~., data = vowel.train, method = "rf")
varImp(modfit4)
modfit4 <- randomForest(y ~., data = vowel.train)
varImp(modfit4)
varImp(modfit4, order = "decreasing")
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
head(vowel.test)
library(caret)
mod_rf <- train(y ~., data = vowel.train, method = "rf")
md_gbm <- train(y ~., data = vowel.train, method = "gbm")
predrf <- predict(mod_rf, vowel.test)
predgbm <- predict(md_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(predrf, vowel.test$y)$overall[1]
confusionMatrix(predgbm, vowel.test$y)$overall[1]
confusionMatrix(predrf, predgbm)
confusionMatrix(predrf[agreedIndex], vowel.test$y[agreedIndex])
agreedIndex <- predrf == predgbm
confusionMatrix(predrf[agreedIndex], vowel.test$y[agreedIndex])
rm(list = ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod_rf <- train(diagnosis ~., data = training, method = "rf")
mod_gbm <- train(diagnosis ~., data = training, method ="gbm", verbose = FALSE)
mod_lda <- train(diagnosis ~., data = training, method = "lda", verbose = FALSE)
predrf <- predict(mod_rf, testing)
predgbm <- predict(mod_gbm, testing)
predlda <- predict(mod_lda, testing)
combined_pred <- data.frame(predrf, predgbm, predlda, diagnosis = testing$diagnosis)
mod_combined <- train(diagnosis ~., data = combined_pred, method = "rf", verbose = FALSE)
mod_rf_analysis <- confusionMatrix(mod_rf)
mod_rf_analysis$overall[1]
mod_rf_analysis$table
mod_rf_analysis
mod_rf_analysis <- confusionMatrix(testing$diagnosis, mod_rf)
mod_rf_analysis <- confusionMatrix(mod_rf, testing$diagnosis)
mod_rf_analysis <- confusionMatrix(testing$diagnosis, predrf)
mod_rf_analysis$overall["Accuracy"]
pred_combined <- predict(mod_combined, testing)
mod_combined_analysis <- confusionMatrix(testing$diagnosis, pred_combined)
mod_combined_analysis$overall["Accuracy"]
mod_gbm_analysis <- confusionMatrix(testing$diagnosis, predgbm)
mod_gbm_analysis$overall["Accuracy"]
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod_fit<-train(CompressiveStrength~., data = training, method = "lasso")
plot.enet(mod_fit$finalModel,  xvar="penalty", use.color=TRUE)
rm(list = ls())
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("gaData.csv")
setwd("~/Documents/DataScienceCoursera")
setwd("~/Documents/DataScienceCoursera")
dat = read.csv("gaData.csv")
setwd("~/Documents/DataScienceCoursera/PracticalM_learning")
setwd("~/Documents/DataScienceCoursera/PracticalM_learning")
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
modBats <- bats(tstrain)
install.packages("forecast")
modBats <- bats(tstrain)
modBats <- bat(tstrain)
library(forecast)
modBats <- bat(tstrain)
modBats <- bats(tstrain)
betweenVal <- sum(testing$visitsTumblr > forecastObj$lower &  testing$visitsTumblr < forecastObj$upper)
betweenVal <- sum(testing$visitsTumblr > modBats$lower &  testing$visitsTumblr < modBats$upper)
betweenVal
betweenVal*100
forecastObjec <- forecast(modBats, level=95, h=nrow(testing))
betweenVal <- sum(testing$visitsTumblr > forecastObjec$lower &  testing$visitsTumblr < forecastObjec$upper)
betweenVal
betweenVal/nrow(testing)
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
install.packages("e1071")
library(e1071)
modfit <- svm(CompressiveStrength ~., data = training)
predfit <- predict(modfit, testing)
modfit_analysis <- confusionMatrix(testing$CompressiveStrength, predfit)
library(caret)
modfit_analysis <- confusionMatrix(testing$CompressiveStrength, predfit)
modfit_analysis <- confusionMatrix(testing$CompressiveStrength, predfit)
library(forecast)
modfit_analysis <- accuracy(testing$CompressiveStrength, predfit)
modfit_analysis
