library("rpart", lib.loc="/usr/lib/R/library")
library("splines", lib.loc="/usr/lib/R/library")
library("parallel", lib.loc="/usr/lib/R/library")
install.packages("slidify")
library(ggplot2)
installed.packages("ggplot1")
installed.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
install.packages(plyr)
install.packages("plyr")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
install.packages("swirl")
library(te)
install.packages("curl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
x<-1
x
msg<- "hello"
msg
x<- 5## comments to the e
x
print(x)
x<-1:20
x
x[2]
[]5
x<-char(5)
attributes(x)
attributes(5)
x = c(1, 2, 3)
x[1]
x(1)
attributes(x)
attributes(obj = char)
attributes(obj = x)
attributes(obj)
attributes(msg)
x<-vector("numeric", 10)
x
x<-c(1.7, "a")
x
x<-c(True, 2)
x<-c(TRUE, 2)
x
x<-c("a", TRUE)
x
x<-0:6
class(x)
as.numeric(x)
x
as.logical(x)
as.character(x)
x
x<-c("a", "b","v")
x
as
m<-1:10
m
dim(m)<-c(2,5)
m
dim(n)<-c(5,2)
dim(m)<-c(5,2)
m
x<-1:3
y<-10:12
a = cbind(x,y)
a
b = rbind(x,y)
b
x<- factor(c("yes", "yes", "no"))
x
table(x)
unclass(x)
nan(X)
nan()
x<-Nan
x <- NaN
x
x <-1
x
x <- c(1,2,NA, 10, 4)
x
is.na((x))
is.na(x)
## vector of true indicate where missing value is
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
names(x)
x <- list(a =1 , b = 2, c= 3)
x
m <-matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a", "n"), c("e", "f"))
m
y <- data.frame(a = 1, b = "a")
dput(y)
con <- url("http://www.hoopchina.com", "r")
x <- readLines(con)
head(x)
p(x)
body(x)
c <- matrix(1:6, 2, 3)
c
x[1,2]
c[1,2]
x <- list(aardvark = 1:5)
x
x$aardvark
x$a
y <- list(aardvark =1:3, bread = 2:4)
y$b
y$aardvark
x <- c(1, 2, NA, 3, NA, 5)
bad <- is.na(x)
bad
x[!bad]
help("complete.cases")
x <- c(1, 2, NA, 4, NA, 5)
x <- c("a", "b", NA, "d", NA, "f")
y <- c(1, 2, NA, 4, NA, 5)
y <- c(1, 2, 3, 4, NA, 5)
good <- complete.cases(x, y)
good
x <- c("a", "b", "c", "d", NA, "f")
good <- complete.cases(x, y)
x <- c("a", "b", "c", "d", NA, "f")
good <- complete.cases(x, y)
good
factor <- gl(3, 10)
length(factor)
factor(3)
library(swirl)
rm(list = ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
load("~/Documents/DataScienceCoursera/.RData")
setwd("~/Documents/DataScienceCoursera")
load("~/Documents/DataScienceCoursera/.RData")
View(Week3Q1)
idaho_subset <- subset(Week3Q1, select = c("ACR", "AGS"))
View(idaho_subset)
agriculturLogical <- (idaho_subset$ACR == 3 & idaho_subset$AGS == 6)
which(agriculturLogical)
install.packag"jpeg")
install.packag("jpeg")
install.packages("jpeg")
library(jpeg)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg "
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl1, destfile = "instr_image.jpg")
wk3q2 <- readJPEG("instr_image.jpeg", native = TRUE)
wk3q2 <- readJPEG("instr_image.jpg", native = TRUE)
View(Week3Q1)
head(wk3q2, n= 4)
str(wk3q2)
help("cut")
quantile(wk3q2, probs = c(0.3, 0.8))
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, destfile = "GDP_data.csv")
download.file(fileUrl3, destfile = "edu_data.csv")
wk3q3_gdp <- read.csv("GDP_data.csv")
wk3q3_edu <- read.csv("edu_data.csv")
head(wk3q3_edu, 4)
head(wk3q3_edu, 3)
library(plyr)
help("merge")
wk3q3_merge <- merge(wk3q3_gdp, wk3q3_edu, by.x = "CountryCode", by.y = "CountryCode")
View(wk3q3_gdp)
View(wk3q3_gdp)
str(wk3q3_edu)
str(wk3q3_gdp)
wk3q3_merge <- merge(wk3q3_gdp, wk3q3_edu, by.x = "X", by.y = "CountryCode")
wk3q3_merge <- arrange(wk3q3_merge, desc(Gross.domestic.product.2012))
View(wk3q3_merge)
View(wk3q3_gdp)
wk3q3_merge <- merge(wk3q3_gdp, wk3q3_edu, by.x = "X", by.y = "CountryCode", all = FALSE)
View(wk3q3_merge)
View(wk3q3_gdp)
wk3q3_gdp$X[1:3]
wk3q3_gdp$X[2]
wk3q3_gdp$X[0]
a <- wk3q3_gdp$X
a[1]
wk3q3_gdp[1:2, ]
wk3q3_gdp <- wk3q3_gdp[5:194, ]
View(wk3q3_edu)
wk3q3_gdp <- subset(wk3q3_gdp, select = c("X", "Gross.domestic.product.2012", "X.2", 'X.3'))
wk3q3_merge <- merge(wk3q3_gdp, wk3q3_edu, by.x = "X", by.y = "CountryCode", all = FALSE)
arrange(wk3q3_merge, desc(Gross.domestic.product.2012))
View(wk3q3_merge)
c <- as.numeric(wk3q3_merge$Gross.domestic.product.2012)
c
sort(c)
sort(wk3q3_merge$Gross.domestic.product.2012)
sort(as.numeric(wk3q3_merge$Gross.domestic.product.2012))
arrange(wk3q3_merge, desc(as.numeric(Gross.domestic.product.2012))
arrange(wk3q3_merge, desc(as.numeric(Gross.domestic.product.2012)))
final_merge <- data.frame(wk3q3_merge$X, as.numeric(wk3q3_merge$Gross.domestic.product.2012))
View(final_merge)
arrange(final_merge, desc(as.numeric.wk3q3_merge.Gross.domestic.product.2012.))
View(wk3q3_gdp)
View(wk3q3_edu)
View(wk3q3_gdp)
View(wk3q3_merge)
final_merge <- data.frame("country" = wk3q3_merge$X, "GDP" = as.numeric(as.character(wk3q3_merge$Gross.domestic.product.2012)))
arrange(final_merge, desc(GDP))
final_merge <- data.frame("country" = wk3q3_merge$X, "GDP" = as.numeric(as.character(wk3q3_merge$Gross.domestic.product.2012)))
final_merge$IncomeGropu <- wk3q3_merge$Income.Group
oecd <- final_merge[final_merge$IncomeGropu == "High income: OECD", ]
mean(oecd$GDP)
library(dplyr)
final_merge$quantGroup <- cut(final_merge$GDP, breaks = quantile(final_merge$GDP, probs = c(0.2, 0.4, 0.6, 0.8, 1)))
table(final_merge$quantGroup, final_merge$IncomeGropu)
final_merge$quantGroup <- cut(final_merge$GDP, breaks = quantile(final_merge$GDP, probs = c(0, 0.2, 0.4, 0.6, 0.8, 1)))
table(final_merge$quantGroup, final_merge$IncomeGropu)
View(final_merge)
